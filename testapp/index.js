const paillierBigint = require('paillier-bigint')

const { getResolver } = require('../did-loc-resolver/lib/index');
const { Resolver } =  require('did-resolver')

// First entity has POI/Location in Decentrland at Decentral Park (-56,76)
// const x = -56n
// const y = 76n
// const poi = {
//     xyFactor : "24842458863964170883616544200100307152366584071824570547518386773587875268761603764131522720853412199352860825746458179453593104118549053127677769629514755666968481186400829104015188130334753914955152055659754768151501939226996455093751224708390516318577324106523874534171680755493038298542553604201402123815958056694930899608870927966615893391363514460085437289465001318858370276732185119612761930056016696406072448504183847104364189810245666693821464302962980963856212474358866430041358116305938321716423580659926033270820695592713871330664385612523913217521192913682298030525046504515455582186572310194027194871188",
//     xFactor : "1815021957738640719005070963961211758605854259112706718715000171834473684502212052691252498547745201834476481200145819025581896891952954361197465656109883689881102599852884558601928400691420647771992950642281479983891625886272719952803309310224422319791436871814727026553692831551111705962601215212630457911720736015081250333756650536855910819610781212859637411241361050706229312693558895487683901991471072418237681367949887017789463608714795252012937554376167122978598846437343598369988221678557140121977392812960158653917990815995226143238300917960909942116415459367009932496455302965243453348800938059379407174743",
//     yFactor : "13144848402877802353591118416343541536029001079062149502453668050301861805069009637439257864268140453626965491504497583054724515530483347765350687718998988258837713166622231405744553136295114482447796581220124777346461325864080859484655266951254518863557093212016178934572530563842951820422536554846674458010034276164835893304483540748113294778255101707011867817298828077250773870764133709476982928308253520136341696531441776773793151015895082387407699088802885748162739039292817449528928242473643426648821980761623343857597944923879807087761743353386389395943733967801291459722385126859795946247610494106173172947962",
//     radius : "100"
// }


async function didLocProximityTest () {

  // Entity 2 is interested in connecting with entity 1 with DID Document identitfier 'did:loc:mumbai:0x754e49da4978bd9FF2e9Bfddd9399898FbB3dEc3'

  // Second entity has a Location in Decentrland at EggHeadz HQ (14,88)
  const u = 14n
  const v = 88n
  // For example here we assume entity 2 is interested in establishing connection with any entity within a radius of 150
  const acceptedDistance = 50;

  // First retrieve the did doc 
  const didResolver = new Resolver(getResolver({infuraProjectId: '4458cf4d1689497b9a38b1d6bbf05e78'}))
  const response = await didResolver.resolve('did:loc:mumbai:0x754e49da4978bd9FF2e9Bfddd9399898FbB3dEc3');
  const poi = response.didDocument.service[0].serviceEndpoint;

  console.log('Entity1 POI')
  console.log(poi)

  // Entity 2 check the preference of entity 1 based on radius value
  if(poi.radius > acceptedDistance) {
    console.log('Entity is prefered distance does not match with local prefernece');
    process.exit();
  }

  // Entity 2 extracts the public key of entity 1 from DID Document
  const n = 158654047794616470028275573187229388767694760694501892194878336468883820342741938813732465084914472764624630155203117463873950269835185172644598969819860796202415887047554163824426722407871918447977694719708904914441704743724349046433912676303810187283038671045821628273617609998106721239529080748942840641787n;
  const g = 24405139526609670466415836975899440191622555196370108181082375703175883755003832374662043241764834915745824859575867480583739307191715069717424110312798818501027348955909680676073769255220584393889326467675623301810148213001821482625987078305144379858429545420023932338475400045036693716705774054180582913631924050026454705214674092811482177512516598783301912130319548200720838041193692002906201646727052873455602716408067406065453916695576247132667047064093522694181268427762356911758969500915632128505171965226990726230412487526462864919525931965096294939363745991180494059857100777326337773126317183787433652068575n;
  const publicKey = new paillierBigint.PublicKey(n, g);
  
  // Entity2 using entity 1 public key perform encryption of coordinates of second entity coordinates 
  // then multiple the result with POI encrypted factors retrieved from the DID Document
  const uvFactor = publicKey.encrypt(u**2n+v**2n);
  const xyuvFactor = publicKey.addition(BigInt(poi.xFactor)**u, BigInt(poi.yFactor)**v);

  // The result will be the distance squared
  const encDistance = publicKey.addition(BigInt(poi.xyFactor) , uvFactor , xyuvFactor);
  console.log('Encrypted Distance Squared: ',encDistance)

  // Distance squared sent to Entity 1 that will perform decryption and find the distance between both entities and decide on accept or reject
  const lambda = 79327023897308235014137786593614694383847380347250946097439168234441910171370969406866232542457236382312315077601558731936975134917592586322299484909930385287432486547748727512846790161611413116411260052376021723385597411675564345787633079776985135051033641473909637567197438903209495047755250503941090316168n;
  const mu = 35637870372922708278901506676518969646190341327623990274959060810868272593670180920828298986016842640165165914037216983909644138893697226770910856670890468070037308450823582886034243226972009169934694784990505288116086676719975137821320756099051161474323953289796817717757727620235896164895555091227498059291n;
  const privateKey = new paillierBigint.PrivateKey(lambda, mu, publicKey)
  const dSquared = privateKey.decrypt(encDistance);
  const d = Math.sqrt(dSquared.toString(10));
  console.log('Distance: ',d.toFixed(0))


}
didLocProximityTest()